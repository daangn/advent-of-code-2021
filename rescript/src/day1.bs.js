// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Fs from "fs";
import * as Path from "path";
import * as Belt_Int from "rescript/lib/es6/belt_Int.js";
import * as Caml_obj from "rescript/lib/es6/caml_obj.js";
import * as Js_option from "rescript/lib/es6/js_option.js";
import * as Belt_Array from "rescript/lib/es6/belt_Array.js";
import * as Caml_array from "rescript/lib/es6/caml_array.js";

console.log("Advent of Code - ReScript - Day 1");

var input = Fs.readFileSync(Path.resolve("./src/day1.input.txt"), "utf-8");

function parseInput(input) {
  var __x = input.trim().split("\n");
  return __x.map(Belt_Int.fromString);
}

var depths = parseInput(input);

var part1Answer = depths.reduce((function (param, nowDepth, i) {
        var answer = param.answer;
        if (i === 0 || Caml_obj.caml_greaterequal(param.beforeDepth, nowDepth)) {
          return {
                  answer: answer,
                  beforeDepth: nowDepth
                };
        } else {
          return {
                  answer: answer + 1 | 0,
                  beforeDepth: nowDepth
                };
        }
      }), {
      answer: 0,
      beforeDepth: Js_option.some(-1)
    }).answer;

console.log("- Part 1 Answer: " + part1Answer.toString());

var part2Answer = Belt_Array.range(0, depths.length - 4 | 0).reduce((function (answer, i) {
        var one = Js_option.getWithDefault(0, Caml_array.get(depths, i));
        var two = Js_option.getWithDefault(0, Caml_array.get(depths, i + 1 | 0));
        var three = Js_option.getWithDefault(0, Caml_array.get(depths, i + 2 | 0));
        var four = Js_option.getWithDefault(0, Caml_array.get(depths, i + 3 | 0));
        if (((one + two | 0) + three | 0) < ((two + three | 0) + four | 0)) {
          return answer + 1 | 0;
        } else {
          return answer;
        }
      }), 0);

console.log("- Part 2 Answer: " + part2Answer.toString());

export {
  input ,
  parseInput ,
  depths ,
  part1Answer ,
  part2Answer ,
  
}
/*  Not a pure module */
